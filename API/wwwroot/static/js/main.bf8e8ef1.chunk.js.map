{"version":3,"sources":["app/models/pagination.ts","app/api/agent.ts","app/models/activity.ts","app/models/profile.ts","app/stores/activityStore.ts","app/stores/profileStore.ts","app/stores/userStore.ts","app/stores/store.ts","app/stores/commonStore.ts","app/stores/modelStore.ts","app/stores/commentStore.ts","app/layout/NavBar.tsx","features/activities/dashboard/ActivityFilters.tsx","features/profiles/FollowButton.tsx","features/profiles/ProfileCard.tsx","features/activities/dashboard/ActivityListItemAttendee.tsx","features/activities/dashboard/ActivityListItem.tsx","features/activities/dashboard/ActivityList.tsx","features/activities/dashboard/activityListItemPlaceholder.tsx","features/activities/dashboard/ActivityDashboard.tsx","app/common/form/MyTextInput.tsx","features/users/LoginForm.tsx","features/errors/ValidationErros.tsx","features/users/RegisterForm.tsx","features/home/HomePage.tsx","app/layout/LoadingComponent.tsx","app/common/form/MyTextArea.tsx","app/common/form/MySelectInput.tsx","app/common/options/categoryOptions.ts","app/common/form/MyDateInput.tsx","features/activities/form/ActivityForm.tsx","features/activities/details/ActivityDetailedChat.tsx","features/activities/details/ActivityDetailedHeader.tsx","features/activities/details/ActivityDetailedInfo.tsx","features/activities/details/activityDetailedSidebar.tsx","features/activities/details/ActivityDetails.tsx","features/errors/TestError.tsx","features/errors/NotFound.tsx","features/errors/ServerError.tsx","app/common/modals/ModalContainer.tsx","features/profiles/ProfileEdit.tsx","features/profiles/ProfileAbout.tsx","features/profiles/ProfileFollwiings.tsx","app/common/imageUpload/PhotoWidgetCropper.tsx","app/common/imageUpload/PhotoWidgetDropzone.tsx","app/common/imageUpload/PhotoUploadWidget.tsx","features/profiles/ProfilePhotos.tsx","features/profiles/‘ProfileActivities’.tsx","features/profiles/ProfileContent.tsx","features/profiles/ProfileHeader.tsx","features/profiles/ProfilePage.tsx","app/layout/PrivateRoute.tsx","app/layout/App.tsx","reportWebVitals.ts","app/layout/ScrollToTop.tsx","index.tsx"],"names":["PaginatedResult","data","pagination","this","PagingParams","pageNumber","pageSize","axios","defaults","baseURL","process","interceptors","request","use","config","token","store","commonStore","headers","Authorization","response","a","JSON","parse","error","status","toast","method","errors","hasOwnProperty","history","push","modalStateErrors","key","flat","setServerError","Promise","reject","responseBody","requests","url","get","then","body","post","put","delete","agent","Activities","list","params","details","id","create","activity","update","attend","Account","current","login","user","register","fbLogin","accessToken","Profiles","username","uploadPhoto","file","formData","FormData","append","setMainPhoto","deletePhoto","updateProfile","profile","updateFollowing","listFollowings","predicate","listActivities","Activity","init","Object","assign","ActivityFormValues","undefined","title","category","description","date","city","vanue","venue","Profile","displayName","image","ActivityStore","activityRegistry","Map","selectedActivity","editMode","loading","loadingInitial","pagingParams","set","setPagingParams","setPredicate","value","resetPredicate","forEach","loadActivities","axiosParams","result","setActivity","setPagination","setLoadingInitial","console","log","loadActivity","getActivity","runInAction","userStore","isGoing","attendees","some","isHost","hostUsername","host","find","x","Date","state","createActivity","attendee","newActivity","updateActivity","updatedActivity","deleteActivity","updateAttendance","filter","cancelActivityToggle","isCancelled","clearSelectedActivity","updateAttendeeFollowing","following","followersCount","makeAutoObservable","reaction","keys","clear","URLSearchParams","toString","toISOString","Array","from","values","sort","b","getTime","entries","activitiesByDate","reduce","activities","format","ProfileStore","loadingProfile","uploading","followings","loadingFollowings","activetab","userActivities","loadingActivities","setActiveTab","activeTab","loadProfile","photo","photos","isMain","setImage","p","setDisplayName","activityStore","followingCount","loadFollowings","loadUserActivities","UserStore","fbAccessToken","fbLoading","creds","setToken","modalStore","closeModal","logout","window","localStorage","removeItem","getUser","name","getFacebookLoginStatus","FB","getLoginStatus","authResponse","facebookLogin","apiLogin","catch","scope","getItem","appLoaded","setAppLoaded","setItem","modal","open","openModal","content","profileStore","commentStore","comments","hubConnection","createHubConnection","activityId","HubConnectionBuilder","withUrl","accessTokenFactory","withAutomaticReconnect","configureLogging","LogLevel","Information","build","start","on","comment","createdAt","unshift","stopHubConnection","stop","clearComments","addComment","invoke","StoreContext","createContext","useStore","useContext","observer","Menu","inverted","fixed","Container","Item","as","NavLink","exact","to","header","src","alt","style","marginRight","Button","positive","position","Image","avatar","spaced","Dropdown","pointing","text","Link","icon","onClick","vertical","size","width","marginTop","Header","attached","color","active","has","onChange","Reveal","animated","Content","visible","fluid","hidden","basic","e","preventDefault","handleFollow","Card","Description","str","length","substring","truncate","bio","extra","Icon","styles","borderColor","borderWidth","List","horizontal","map","Popup","hoverable","trigger","circular","bordered","ActivityListItem","Segment","Group","Label","textAlign","marginBottom","secondary","clearing","floated","groupedActivities","group","sub","ActivityListItemPlaceholder","Placeholder","minHeight","Line","Paragraph","disabled","useState","loadingNext","setLoadingNext","useEffect","Grid","Column","pageStart","loadMore","currentPage","hasMore","totalPages","initialLoad","Loader","MyTextInput","props","useField","field","meta","Form","Field","touched","label","initialValues","email","password","onSubmit","setErrors","handleSubmit","isSubmitting","className","autoComplete","placeholder","type","render","ValidationErrors","Message","err","indexOfItem","validationSchema","Yup","required","isValid","dirty","isLoggedIn","Divider","LoadingComponent","Dimmer","MyTextArea","MySelectInput","helpers","Select","clearable","options","d","setValue","onBlur","setTouched","categoryOptions","MyDateInput","selected","useHistory","useParams","nullable","enableReinitialize","newActvity","uuid","handleFormSubmit","rows","placeholderText","showTimeSelect","timeCaption","dateFormat","border","resetForm","onKeyPress","shiftKey","Comment","Avatar","Author","Metadata","formatDistanceToNow","Text","whiteSpace","activityImageStyle","activityImageTextStyle","bottom","left","height","padding","zIndex","top","ribbon","verticalAlign","relaxed","divided","Extra","TestErrors","widths","baseUrl","primary","NotFound","Inline","message","Modal","onClose","setEditMode","isCurrentUser","Tab","Pane","ProfileEdit","itemsPerRow","PhotoWidgetCropper","ImagePreview","setCropper","initialAspectRatio","aspectRatio","preview","guides","viewMode","autoCropArea","background","onInitialized","cropper","PhotoWidgetDropzone","setFiles","dzStyles","borderRadius","paddingTop","onDrop","useCallback","acceptedFiles","URL","createObjectURL","useDropzone","getRootProps","getInputProps","isDragActive","PhotoUploadWidget","files","revokeObjectURL","overflow","getCroppedCanvas","toBlob","blob","addPhotoMode","setAddPhotoMode","target","setTarget","currentTarget","handleSetMainPhoto","handleDeletePhoto","panes","menuItem","pane","ProfileActivities","menu","onTabChange","activeIndex","handleTabChange","objectFit","Meta","ProfileFollwiings","menuPosition","Statistic","PrivateRoute","Component","component","rest","location","useLocation","finally","hideProgressBar","path","HomePage","ActivityDashboard","ActivityDetails","ActivityForm","ProfilePage","ServerError","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ScrollToTop","pathname","scrollTo","createBrowserHistory","ReactDOM","Provider","document","getElementById"],"mappings":"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","file":"static/js/main.bf8e8ef1.chunk.js","sourcesContent":["\r\nexport interface Pagination {\r\n    currentPage : number;\r\n    itemsPerPage : number;\r\n    totalItems: number;\r\n    totalPages: number;\r\n}\r\n\r\nexport class PaginatedResult<T> {\r\n    data: T;\r\n    pagination: Pagination;\r\n\r\n    constructor(data: T, pagination: Pagination){\r\n        this.data = data;\r\n        this.pagination = pagination;\r\n    }\r\n}\r\n\r\nexport class PagingParams{\r\n    pageNumber;\r\n    pageSize;\r\n\r\n    constructor(pageNumber = 1, pageSize = 2) {\r\n        this.pageNumber = pageNumber;\r\n        this.pageSize = pageSize;\r\n\r\n    }\r\n}","import axios, { AxiosError, AxiosResponse } from 'axios';\r\nimport { toast } from 'react-toastify';\r\nimport { history } from '../..';\r\nimport { Activity, ActivityFormValues } from '../models/activity';\r\nimport { PaginatedResult } from '../models/pagination';\r\nimport { Photo, Profile, UserActivity } from '../models/profile';\r\nimport { User, UserFormValues } from '../models/user';\r\nimport { store } from '../stores/store';\r\n\r\nconst sleep = (delay: number) => {\r\n    return new Promise((resolve) => { setTimeout(resolve, delay) })\r\n}\r\n\r\naxios.defaults.baseURL = process.env.REACT_APP_API_URL;\r\n\r\naxios.interceptors.request.use(config => {\r\n    const token = store.commonStore.token;\r\n    if (token) config.headers.Authorization = `Bearer ${token}`;\r\n    return config;\r\n})\r\n\r\naxios.interceptors.response.use(async response => {\r\n\r\n    if(process.env.NODE_ENV === 'development') await sleep(1000);\r\n        \r\n        const pagination = response.headers['pagination'];\r\n        if(pagination){\r\n            response.data = new PaginatedResult(response.data, JSON.parse(pagination));\r\n            return response as AxiosResponse<PaginatedResult<any>>\r\n        }\r\n        return response;\r\n\r\n}, (error: AxiosError) =>{\r\n    const {data, status, config} = error.response!;\r\n    switch(status){\r\n        case 400:\r\n            if(typeof data === 'string'){\r\n                toast.error(data);\r\n            }\r\n            if (config.method === 'get' && data.errors.hasOwnProperty('id')){\r\n                history.push('/not-found');\r\n            }\r\n            if(data.errors){\r\n                const modalStateErrors = [];\r\n                for (const key in data.errors){\r\n                    if(data.errors[key]){\r\n                        modalStateErrors.push(data.errors[key])\r\n                    }\r\n                }\r\n                throw modalStateErrors.flat(); //used to flatten the array so that we can just get the list of strings\r\n            }\r\n            \r\n            break;\r\n        case 401:\r\n            toast.error('unautorized');\r\n            break;\r\n        case 404:\r\n            history.push('/not-found')\r\n            break;\r\n        case 500:\r\n            store.commonStore.setServerError(data);\r\n            history.push('/server-error');\r\n\r\n            break;\r\n    }\r\n    return Promise.reject(error);\r\n})\r\n\r\nconst responseBody = <T>(response: AxiosResponse<T>) => response.data;\r\n\r\nconst requests = {\r\n    get: <T>(url: string) => axios.get<T>(url).then(responseBody),\r\n    post: <T>(url: string, body: {}) => axios.post<T>(url, body).then(responseBody),\r\n    put: <T>(url: string, body: {}) => axios.put<T>(url, body).then(responseBody),\r\n    del: <T>(url: string) => axios.delete<T>(url).then(responseBody),\r\n}\r\n\r\nconst Activities = {\r\n    list: (params: URLSearchParams) => axios.get<PaginatedResult<Activity[]>>('/activities', {params})\r\n    .then(responseBody),\r\n    details: (id: string) => requests.get<Activity>(`/activities/${id}`),\r\n    create: (activity: ActivityFormValues) => requests.post<void>('/activities', activity),\r\n    update: (activity: ActivityFormValues) => requests.put<void>(`/activities/${activity.id}`, activity),\r\n    delete: (id: string) => requests.del<void>(`/activities/${id}`),\r\n    attend: (id: string) => requests.post<void>(`/activities/${id}/attend`, {})\r\n}\r\nconst Account = {\r\n    current: () => requests.get<User>('/account'),\r\n    login: (user: UserFormValues) => requests.post<User>('/account/login', user),\r\n    register: (user: UserFormValues) => requests.post<User>('/account/register', user),\r\n    fbLogin: (accessToken: string) => requests.post<User>(`/account/fbLogin?accessToken=${accessToken}`, {})\r\n}\r\n\r\nconst Profiles = {\r\n    get: (username: string) => requests.get<Profile>(`/profiles/${username}`),\r\n    uploadPhoto: (file: Blob) =>{\r\n        let formData = new FormData();\r\n        formData.append('File', file);\r\n        return axios.post<Photo>('photos', formData, {\r\n            headers: {'Content-type': 'multipart/form-data'}\r\n        })\r\n    },\r\n    setMainPhoto: (id: string) => requests.post(`/photos/${id}/setMain`, {}),\r\n    deletePhoto: (id: string) => requests.del(`/photos/${id}`),\r\n    updateProfile: (profile: Partial<Profile>) => requests.put('/profiles', profile),\r\n    updateFollowing: (username: string) => requests.post(`/follow/${username}`, {}),\r\n    listFollowings: (username: string, predicate: string) => \r\n    requests.get<Profile[]>(`/follow/${username}?predicate=${predicate}`),\r\n    listActivities: (username: string, predicate: string) => requests.get<UserActivity[]>\r\n    (`/profiles/${username}/activities?predicate=${predicate}`)\r\n\r\n}\r\n\r\nconst agent = {\r\n    Activities,\r\n    Account,\r\n    Profiles\r\n}\r\n\r\nexport default agent;\r\n","import { Profile } from \"./profile\";\r\n\r\nexport interface Activity {\r\n    id: string;\r\n    title: string;\r\n    date: Date | null;\r\n    description: string;\r\n    category: string;\r\n    city: string;\r\n    venue: string;\r\n    hostUsername: string;\r\n    isCancelled: boolean;\r\n    isGoing: boolean;\r\n    isHost: boolean;\r\n    host?: Profile;\r\n    attendees: Profile[];\r\n  }\r\nexport class Activity implements Activity{\r\n  constructor(init?: ActivityFormValues){\r\n    Object.assign(this, init)\r\n  }\r\n}\r\n\r\n  export class ActivityFormValues{\r\n    id?: string = undefined;\r\n    title: string = '';\r\n    category: string = '';\r\n    description: string = '';\r\n    date: Date | null = null;\r\n    city: string = '';\r\n    vanue: string = '';\r\n\r\n    constructor(activity?: Activity){\r\n      if(activity) {\r\n        this.id = activity.id;\r\n        this.title = activity.title;\r\n        this.category = activity.category;\r\n        this.description = activity.description;\r\n        this.date = activity.date;\r\n        this.city = activity.city;\r\n        this.vanue = activity.venue;\r\n      }\r\n\r\n    }\r\n\r\n  }\r\n  ","import { User } from \"./user\";\r\n\r\nexport interface Profile {\r\n    username: string;\r\n    displayName: string;\r\n    image?: string;\r\n    bio?: string;\r\n    followersCount: number;\r\n    followingCount: number;\r\n    following: boolean;\r\n    photos?: Photo[];\r\n}\r\nexport class Profile implements Profile {\r\n    constructor(user: User) {\r\n\r\n        this.username = user.username\r\n        this.displayName = user.displayName\r\n        this.image = user.image\r\n    }\r\n}\r\n\r\nexport interface Photo {\r\n    id: string;\r\n    url: string;\r\n    isMain: boolean;\r\n\r\n}\r\n\r\nexport interface UserActivity {\r\n    id: string;\r\n    title: string;\r\n    category: string;\r\n    date: Date;\r\n   }","import { makeAutoObservable, reaction, runInAction } from \"mobx\";\r\nimport agent from \"../api/agent\";\r\nimport { Activity, ActivityFormValues } from \"../models/activity\";\r\nimport {format} from 'date-fns';\r\nimport { store } from \"./store\";\r\nimport { Profile } from \"../models/profile\";\r\nimport { Pagination, PagingParams } from \"../models/pagination\";\r\n\r\nexport default class ActivityStore {\r\n    activityRegistry = new Map<string, Activity>();\r\n    selectedActivity: Activity | undefined = undefined;\r\n    editMode = false;\r\n    loading = false;\r\n    loadingInitial = false;\r\n    pagination: Pagination | null = null;\r\n    pagingParams = new PagingParams();\r\n    predicate = new Map().set('all', true);\r\n\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n\r\n        reaction(\r\n            () => this.predicate.keys(),\r\n            () => {\r\n                this.pagingParams = new PagingParams();\r\n                this.activityRegistry.clear();\r\n                this.loadActivities();\r\n            }\r\n\r\n        )\r\n\r\n    }\r\n    setPagingParams = (pagingParams: PagingParams) => {\r\n        this.pagingParams = pagingParams;\r\n    }\r\n\r\n    setPredicate = (predicate: string, value: string | Date) => {\r\n        const resetPredicate = () => {\r\n            this.predicate.forEach((value, key) => {\r\n                if(key !== 'startDate') this.predicate.delete(key);\r\n            })\r\n        }\r\n     \r\n        switch(predicate){\r\n            case 'all':\r\n                resetPredicate();\r\n                this.predicate.set('all', true);\r\n                break;\r\n            case 'isGoing':\r\n                resetPredicate();\r\n                this.predicate.set('isGoing', true);\r\n                break;\r\n            case 'isHost':\r\n                resetPredicate();\r\n                this.predicate.set('isHost', true);\r\n                break;\r\n            case 'startDate':\r\n                this.predicate.delete('startDate');\r\n                this.predicate.set('startDate', value)\r\n                break;\r\n\r\n\r\n        }\r\n    }\r\n    get axiosParams(){\r\n        const params = new URLSearchParams();\r\n        params.append('pageNumber', this.pagingParams.pageNumber.toString());\r\n        params.append('pageSize', this.pagingParams.pageSize.toString());\r\n        this.predicate.forEach((value, key) => {\r\n            if(key === 'startDate'){\r\n                params.append(key, (value as Date).toISOString());\r\n            } else{\r\n                params.append(key, value);\r\n            }\r\n        })\r\n        return params;\r\n    }\r\n    get activitiesByDate() {\r\n        return Array.from(this.activityRegistry.values())\r\n            .sort((a, b) => a.date!.getTime() - b.date!.getTime());\r\n    }\r\n\r\n    get groupedActivities() {\r\n        return Object.entries(\r\n            this.activitiesByDate.reduce((activities, activity) => {\r\n                const date = format(activity.date!, 'dd MMM yyyy');\r\n                activities[date] = activities[date] ? [...activities[date], activity] : [activity];\r\n                return activities;\r\n            }, {} as {[key: string]: Activity[]})\r\n        )\r\n\r\n    }\r\n\r\n    loadActivities = async () => {\r\n        this.loadingInitial = true;\r\n        try {\r\n            const result = await agent.Activities.list(this.axiosParams);\r\n            result.data.forEach(activity => {\r\n                this.setActivity(activity);\r\n            })\r\n            this.setPagination(result.pagination)\r\n            this.setLoadingInitial(false);\r\n\r\n        } catch (error) {\r\n            console.log(error);\r\n            this.setLoadingInitial(false);\r\n\r\n        }\r\n    }\r\n\r\n    setPagination = (pagination: Pagination) => {\r\n        this.pagination = pagination;\r\n    }\r\n\r\n    loadActivity = async (id: string) => {\r\n        let activity = this.getActivity(id);\r\n        if (activity) {\r\n            this.selectedActivity = activity;\r\n            return activity;\r\n        } else {\r\n            this.loadingInitial = true;\r\n            try {\r\n                activity = await agent.Activities.details(id);\r\n                this.setActivity(activity);\r\n                runInAction(() => {\r\n                    this.selectedActivity = activity;\r\n                })\r\n                this.setLoadingInitial(false);\r\n                return activity;\r\n            }\r\n            catch (error) {\r\n                console.log(error);\r\n                this.setLoadingInitial(false);\r\n            }\r\n        }\r\n    }\r\n\r\n    private setActivity = (activity: Activity) => {\r\n        const user = store.userStore.user;\r\n        if(user){\r\n            activity.isGoing = activity.attendees!.some(a=> a.username === user.username);\r\n            activity.isHost = activity.hostUsername === user.username;\r\n            activity.host = activity.attendees?.find(x => x.username === activity.hostUsername);\r\n        }\r\n\r\n        activity.date = new Date(activity.date!);\r\n        this.activityRegistry.set(activity.id, activity);\r\n    }\r\n    private getActivity = (id: string) => {\r\n        return this.activityRegistry.get(id);\r\n    }\r\n\r\n    setLoadingInitial = (state: boolean) => {\r\n        this.loadingInitial = state;\r\n    }\r\n\r\n    createActivity = async (activity: ActivityFormValues) => {\r\n        const user = store.userStore.user;\r\n        const attendee = new Profile(user!);\r\n\r\n        try {\r\n            await agent.Activities.create(activity);\r\n            const newActivity = new Activity(activity);\r\n            newActivity.hostUsername = user!.username;\r\n            newActivity.attendees = [attendee];\r\n            this.setActivity(newActivity);\r\n            runInAction(() => {\r\n                this.selectedActivity = newActivity;\r\n             \r\n            })\r\n        } catch (error) {\r\n          \r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    updateActivity = async (activity: ActivityFormValues) => {\r\n        try {\r\n            await agent.Activities.update(activity);\r\n            runInAction(() => {\r\n                if(activity.id){\r\n                    let updatedActivity = {...this.getActivity(activity.id), ...activity}\r\n                    this.activityRegistry.set(activity.id, updatedActivity as Activity);\r\n                    this.selectedActivity = updatedActivity as Activity;\r\n\r\n                }\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n    deleteActivity = async (id: string) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Activities.delete(id);\r\n            runInAction(() => {\r\n                this.activityRegistry.delete(id)\r\n                this.loading = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => {\r\n                this.loading = false;\r\n            })\r\n        }\r\n    }\r\n    updateAttendance = async () => {\r\n        const user = store.userStore.user;\r\n        this.loading = true;\r\n        try{\r\n            await agent.Activities.attend(this.selectedActivity!.id);\r\n            runInAction(() => {\r\n                if(this.selectedActivity?.isGoing) {\r\n                    this.selectedActivity.attendees = \r\n                    this.selectedActivity.attendees?.filter(a => a.username !== user?.username);\r\n                    this.selectedActivity.isGoing = false;\r\n                }else {\r\n                    const attendee = new Profile(user!);\r\n                    this.selectedActivity?.attendees?.push(attendee);\r\n                    this.selectedActivity!.isGoing = true;\r\n                }\r\n                this.activityRegistry.set(this.selectedActivity!.id, this.selectedActivity!)\r\n            })\r\n        }\r\n        catch (error){\r\n            console.log(error);\r\n        }finally{\r\n            runInAction(() => this.loading = false)\r\n        }\r\n    }\r\n\r\n    cancelActivityToggle = async () =>{\r\n        this.loading = true;\r\n        try{\r\n\r\n           await agent.Activities.attend(this.selectedActivity!.id);   \r\n            runInAction(() => {\r\n                this.selectedActivity!.isCancelled = !this.selectedActivity?.isCancelled;\r\n                this.activityRegistry.set(this.selectedActivity!.id, this.selectedActivity!)\r\n            })\r\n        }catch(error){\r\n            console.log(error);\r\n            \r\n        }finally{\r\n            runInAction(() => this.loading = false)\r\n        }\r\n    }\r\n    clearSelectedActivity = () => {\r\n        this.selectedActivity = undefined;\r\n    }\r\n\r\n    updateAttendeeFollowing = (username: string) => {\r\n        this.activityRegistry.forEach(activity => {\r\n            activity.attendees.forEach(attendee => {\r\n                if(attendee.username === username) {\r\n                    attendee.following ? attendee.followersCount--: attendee.followersCount++;\r\n                    attendee.following = !attendee.following;\r\n                }\r\n            })\r\n        })\r\n    }\r\n}","import { makeAutoObservable, reaction, runInAction } from \"mobx\";\r\nimport agent from \"../api/agent\";\r\nimport { Photo, Profile, UserActivity } from \"../models/profile\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class ProfileStore {\r\n    profile: Profile | null = null;\r\n    loadingProfile = false;\r\n    uploading = false;\r\n    loading = false;\r\n    followings: Profile[] = [];\r\n    loadingFollowings = false;\r\n    activetab = 0;\r\n    userActivities: UserActivity[] = [];\r\n    loadingActivities = false;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n        reaction(\r\n            () => this.activetab,\r\n            activetab => {\r\n                if (activetab === 3 || activetab === 4) {\r\n                    const predicate = activetab === 3 ? 'followers' : 'following';\r\n                    this.loadFollowings(predicate);\r\n                } else {\r\n                    this.followings = [];\r\n                }\r\n            }\r\n        )\r\n    }\r\n    setActiveTab = (activeTab: any) => {\r\n        this.activetab = activeTab;\r\n    }\r\n    get isCurrentUser() {\r\n        if (store.userStore.user && this.profile) {\r\n            return store.userStore.user.username === this.profile.username;\r\n        }\r\n        return false;\r\n\r\n    }\r\n\r\n    loadProfile = async (username: string) => {\r\n        this.loadingProfile = true;\r\n        try {\r\n            const profile = await agent.Profiles.get(username);\r\n            runInAction(() => {\r\n                this.profile = profile;\r\n                this.loadingProfile = false;\r\n            })\r\n\r\n        }\r\n        catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loadingProfile = false);\r\n\r\n        }\r\n    }\r\n    uploadPhoto = async (file: Blob) => {\r\n        this.uploading = true;\r\n        try {\r\n\r\n            const response = await agent.Profiles.uploadPhoto(file);\r\n            const photo = response.data;\r\n            runInAction(() => {\r\n                if (this.profile) {\r\n                    this.profile.photos?.push(photo);\r\n                    if (photo.isMain && store.userStore.user) {\r\n                        store.userStore.setImage(photo.url)\r\n                        this.profile.image = photo.url;\r\n                    }\r\n                }\r\n                this.uploading = false;\r\n            })\r\n\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.uploading = false);\r\n        }\r\n    }\r\n\r\n    setMainPhoto = async (photo: Photo) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.setMainPhoto(photo.id)\r\n            store.userStore.setImage(photo.url);\r\n            runInAction(() => {\r\n                if (this.profile && this.profile.photos) {\r\n                    this.profile.photos.find(p => p.isMain)!.isMain = false;\r\n                    this.profile.photos.find(p => p.id === photo.id)!.isMain = true;\r\n                    this.profile.image = photo.url;\r\n                    this.loading = false;\r\n                }\r\n            })\r\n        } catch (error) {\r\n            runInAction(() => this.loading = false);\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n    deletePhoto = async (photo: Photo) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.deletePhoto(photo.id)\r\n            runInAction(() => {\r\n                if (this.profile) {\r\n                    // this line updates visually the photo deletion, otherwise it will be updated after page refresh\r\n                    this.profile.photos = this.profile.photos?.filter(p => p.id !== photo.id);\r\n                    this.loading = false;\r\n                }\r\n            })\r\n\r\n        } catch (error) {\r\n            runInAction(() => this.loading = false);\r\n            console.log(error);\r\n        }\r\n    }\r\n    updateProfile = async (profile: Partial<Profile>) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.updateProfile(profile);\r\n            runInAction(() => {\r\n                if (profile.displayName && profile.displayName !== store.userStore.user?.displayName) {\r\n                    store.userStore.setDisplayName(profile.displayName);\r\n                }\r\n                this.profile = { ...this.profile, ...profile as Profile }\r\n                this.loading = false;\r\n            })\r\n\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n    // following parameter is what we're about to change the status to\r\n    // it is not representing the current following status\r\n    updateFollowing = async (username: string, following: boolean) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.updateFollowing(username);\r\n            store.activityStore.updateAttendeeFollowing(username);\r\n            runInAction(() => {\r\n                if (this.profile && this.profile.username !== store.userStore.user?.username && this.profile.username === username) {\r\n                    following ? this.profile.followersCount++ : this.profile.followersCount--;\r\n                    this.profile.following = !this.profile.following;\r\n                }\r\n                if (this.profile && this.profile.username === store.userStore.user?.username) {\r\n                    following ? this.profile.followingCount++ : this.profile.followingCount--;\r\n                }\r\n                this.followings.forEach(profile => {\r\n                    if (profile.username === username) {\r\n                        profile.following ? profile.followersCount-- : profile.followersCount++;\r\n                        profile.following = !profile.following;\r\n                    }\r\n                })\r\n                this.loading = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error)\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n\r\n    loadFollowings = async (predicate: string) => {\r\n        this.loadingFollowings = true;\r\n        try {\r\n\r\n            const followings = await agent.Profiles.listFollowings(this.profile!.username, predicate);\r\n            runInAction(() => {\r\n                this.followings = followings;\r\n                this.loadingFollowings = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loadingFollowings = false);\r\n        }\r\n    }\r\n\r\n    loadUserActivities = async (username: string, predicate?: string) => {\r\n        this.loadingActivities = true;\r\n        try {\r\n            const activities = await agent.Profiles.listActivities(username, predicate!);\r\n            runInAction(() => {\r\n                this.userActivities = activities;\r\n                this.loadingActivities = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => {\r\n                this.loadingActivities = false;\r\n            })\r\n        }\r\n    }\r\n}","import { makeAutoObservable, runInAction } from \"mobx\";\r\nimport { history } from \"../..\";\r\nimport agent from \"../api/agent\";\r\nimport { User, UserFormValues } from \"../models/user\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class UserStore {\r\n    user: User | null = null;\r\n    fbAccessToken: string | null = null;\r\n    fbLoading = false;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this)\r\n\r\n    }\r\n    get isLoggedIn() {\r\n        return !!this.user;\r\n\r\n    }\r\n    login = async (creds: UserFormValues) => {\r\n        try {\r\n            const user = await agent.Account.login(creds);\r\n            store.commonStore.setToken(user.token);\r\n            runInAction(() => this.user = user);\r\n            history.push('/activities');\r\n            store.modalStore.closeModal()\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    logout = () => {\r\n        store.commonStore.setToken(null);\r\n        window.localStorage.removeItem('jwt');\r\n        this.user = null;\r\n        history.push('/');\r\n\r\n    }\r\n    getUser = async () => {\r\n        try {\r\n            const user = await agent.Account.current();\r\n            runInAction(() => this.user = user);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    register = async (creds: UserFormValues) => {\r\n        try {\r\n            const user = await agent.Account.register(creds);\r\n            store.commonStore.setToken(user.token);\r\n            runInAction(() => this.user = user);\r\n            history.push('/activities');\r\n            store.modalStore.closeModal()\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    setImage = (image: string) =>{\r\n        if(this.user) {\r\n            this.user.image = image;\r\n        }\r\n    }\r\n\r\n    setDisplayName = (name: string) => {\r\n        if (this.user){\r\n            this.user.displayName = name;\r\n        }\r\n    }\r\n\r\n    getFacebookLoginStatus = async () => {\r\n        window.FB.getLoginStatus(response => {\r\n            if (response.status === 'connected'){\r\n                this.fbAccessToken = response.authResponse.accessToken;\r\n            }\r\n        })\r\n    }\r\n    facebookLogin = () => {\r\n        this.fbLoading = true;\r\n        const apiLogin = (accessToken: string) => {\r\n            agent.Account.fbLogin(accessToken).then(user => {\r\n                store.commonStore.setToken(user.token);\r\n                runInAction(() => {\r\n                    this.user = user;\r\n                    this.fbLoading = false;\r\n                });\r\n                console.log(user);\r\n                console.log(\"executed\")\r\n                history.push('/activities');\r\n            }).catch(error => {\r\n                console.log(error);\r\n                runInAction(() => this.fbLoading = false);\r\n            });\r\n        }\r\n        if (this.fbAccessToken){\r\n            apiLogin(this.fbAccessToken);\r\n        } else {\r\n            window.FB.login(response => {\r\n                apiLogin(response.authResponse.accessToken);\r\n            }, {scope: 'public_profile, email'})\r\n        }\r\n       \r\n    }\r\n}","import { createContext, useContext } from \"react\";\r\nimport ActivityStore from \"./activityStore\";\r\nimport CommentStore from \"./commentStore\";\r\nimport CommonStore from \"./commonStore\";\r\nimport ModalStore from \"./modelStore\";\r\nimport ProfileStore from \"./profileStore\";\r\nimport UserStore from \"./userStore\";\r\n\r\ninterface Store {\r\n    activityStore: ActivityStore;\r\n    commonStore: CommonStore;\r\n    userStore: UserStore;\r\n    modalStore: ModalStore;\r\n    profileStore: ProfileStore;\r\n    commentStore: CommentStore;\r\n}\r\n\r\nexport const store: Store = {\r\n    activityStore: new ActivityStore(),\r\n    commonStore: new CommonStore(),\r\n    userStore: new UserStore(),\r\n    modalStore: new ModalStore(),\r\n    profileStore: new ProfileStore(),\r\n    commentStore: new CommentStore()\r\n}\r\nexport const StoreContext = createContext(store);\r\n\r\nexport function useStore() \r\n{\r\n    return useContext(StoreContext);\r\n}","import { makeAutoObservable, reaction } from \"mobx\";\r\nimport { ServerError } from \"../models/serverError\";\r\n\r\nexport default class CommonStore{\r\n    error: ServerError | null = null;\r\n    token: string | null = window.localStorage.getItem('jwt');\r\n    appLoaded = false;\r\n\r\n    constructor(){\r\n        makeAutoObservable(this);\r\n        reaction(\r\n            () => this.token,\r\n            token => {\r\n                if (token){\r\n                    window.localStorage.setItem('jwt', token);\r\n                }else{\r\n                    window.localStorage.removeItem('jwt');\r\n                }\r\n            }\r\n        )\r\n    }\r\n    setServerError = (error: ServerError) => {\r\n        this.error = error;\r\n    }\r\n\r\n    setToken = (token: string | null) => {\r\n        this.token = token;\r\n    }\r\n\r\n    setAppLoaded = () => {\r\n        this.appLoaded = true;\r\n    }\r\n}","import { makeAutoObservable } from \"mobx\"\r\n\r\ninterface Modal{\r\n    open: boolean;\r\n    body: JSX.Element | null;\r\n}\r\nexport default class ModalStore{\r\n    modal: Modal = {\r\n        open: false,\r\n        body: null\r\n\r\n    }\r\n    /**\r\n     *\r\n     */\r\n    constructor() {\r\n        makeAutoObservable(this)\r\n        \r\n    }\r\n    openModal = (content: JSX.Element) => {\r\n        this.modal.open = true;\r\n        this.modal.body = content;\r\n    }\r\n\r\n    closeModal = () => {\r\n        this.modal.open = false;\r\n        this.modal.body = null;\r\n    }\r\n}","import { HubConnection, HubConnectionBuilder, LogLevel } from \"@microsoft/signalr\";\r\nimport { makeAutoObservable, runInAction } from \"mobx\";\r\nimport { ChatComment } from \"../models/comment\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class CommentStore{\r\n    comments: ChatComment[] = [];\r\n    hubConnection: HubConnection | null = null;\r\n\r\n    constructor()\r\n    {\r\n        makeAutoObservable(this)\r\n    }\r\n\r\n    createHubConnection = (activityId: string) => {\r\n        if (store.activityStore.selectedActivity){\r\n            this.hubConnection = new HubConnectionBuilder()\r\n            .withUrl(process.env.REACT_APP_CHAT_URL +'?activityId=' + activityId, {\r\n                accessTokenFactory: () => store.userStore.user?.token!\r\n\r\n            }).withAutomaticReconnect()\r\n            .configureLogging(LogLevel.Information)\r\n            .build();\r\n\r\n         this.hubConnection.start().catch(error => console.log('Error establishing the connection: ', error));\r\n         this.hubConnection.on('LoadComments', (comments: ChatComment[]) => {\r\n             runInAction(() => {\r\n                 comments.forEach(comment => {\r\n                     comment.createdAt = new Date(comment.createdAt + 'Z');\r\n                 })\r\n                this.comments = comments\r\n\r\n             });\r\n         });\r\n         this.hubConnection.on(\"ReceiveComment\", (comment: ChatComment) =>{\r\n            runInAction(() => {\r\n                comment.createdAt = new Date(comment.createdAt);\r\n                this.comments.unshift(comment)\r\n            });\r\n         });\r\n\r\n        }\r\n    }\r\n\r\n    stopHubConnection = () => {\r\n        this.hubConnection?.stop().catch(error => console.log(\"Error stopping connection\", error));\r\n    }\r\n    \r\n    clearComments = () => {\r\n        this.comments = [];\r\n        this.stopHubConnection();\r\n    }\r\n\r\n    addComment = async (values: any) => {\r\n        values.activityId = store.activityStore.selectedActivity?.id;\r\n        try \r\n        {\r\n            await this.hubConnection?.invoke('SendComment', values);\r\n\r\n        } catch (error)\r\n        {\r\n            console.log(error)\r\n        }\r\n    }\r\n}","import { Button, Container, Menu, Image, Dropdown } from 'semantic-ui-react';\r\nimport { Link, NavLink } from 'react-router-dom';\r\nimport { useStore } from '../stores/store';\r\nimport { observer } from 'mobx-react-lite';\r\n\r\n\r\n\r\nexport default observer(function NavBar() {\r\n    const {userStore: {user, logout}} = useStore();\r\n\r\n    return (\r\n        <Menu inverted fixed='top'>\r\n            <Container>\r\n                \r\n                <Menu.Item as={NavLink} exact to='/'header>\r\n                    <img src=\"/assets/logo.png\" alt='logo' style={{marginRight: '10px'}}/>\r\n                Reactivities\r\n                </Menu.Item>\r\n                <Menu.Item as={NavLink} to=\"/activities\" name='Activities' />\r\n                <Menu.Item as={NavLink} to=\"/errors\" name='Errors' />\r\n                <Menu.Item>\r\n                    <Button as={NavLink} to=\"/createActivity\" positive content='Create Activity' />\r\n                </Menu.Item>\r\n                <Menu.Item position='right'>\r\n                    <Image src={user?.image || 'assets/user.png'} avatar spaced='right'/>\r\n                    <Dropdown pointing='top left' text={user?.displayName}>\r\n                        <Dropdown.Menu>\r\n                            <Dropdown.Item as={Link} to={`/profiles/${user?.username}`} text='My Profile' icon='user'/>\r\n                            <Dropdown.Item onClick={logout} text='Logout' icon='power'/>\r\n                        </Dropdown.Menu>\r\n                    </Dropdown>\r\n                </Menu.Item>\r\n            </Container>\r\n        </Menu>\r\n\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport Calendar from 'react-calendar';\r\nimport { Header, Menu } from 'semantic-ui-react';\r\nimport { useStore } from '../../../app/stores/store';\r\n\r\nexport default observer(function ActivityFilters() {\r\n    const {activityStore: {predicate, setPredicate}} = useStore();\r\n    return (\r\n        <>\r\n            <Menu vertical size='large' style={{ width: '100%', marginTop: 25 }}>\r\n                <Header icon='filter' attached color='teal' content='Filters' />\r\n                <Menu.Item \r\n                content='All activities' \r\n                active={predicate.has('all')}\r\n                onClick={() => setPredicate('all', \"true\")}\r\n                />\r\n                <Menu.Item \r\n                content=\"I'm going\" \r\n                active={predicate.has('isGoing')}\r\n                onClick={() => setPredicate('isGoing', \"true\")}\r\n                />\r\n                <Menu.Item \r\n                content=\"I'm hosting\" \r\n                active={predicate.has('isHost')}\r\n                onClick={() => setPredicate('isHost', \"true\")}\r\n                />\r\n            </Menu>\r\n            <Header />\r\n            <Calendar \r\n            \r\n                onChange={(date) => setPredicate('startDate', date as Date)}\r\n                value={predicate.get('startDate') || new Date()}\r\n            />\r\n        </>\r\n\r\n    )\r\n\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React, { SyntheticEvent } from 'react';\r\nimport { Button, Reveal } from 'semantic-ui-react';\r\nimport { Profile } from '../../app/models/profile';\r\nimport { useStore } from '../../app/stores/store';\r\n\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function FollowButton({profile} : Props){\r\n    const {profileStore, userStore} = useStore();\r\n    const {updateFollowing, loading} = profileStore;\r\n    if(userStore.user?.username === profile.username) {\r\n        return null;\r\n    }\r\n\r\nfunction handleFollow(e: SyntheticEvent, username: string) {\r\n    e.preventDefault();\r\n    profile.following ? updateFollowing(username, false) : updateFollowing(username, true);\r\n}\r\n\r\n    return (\r\n        <Reveal animated='move'>\r\n            <Reveal.Content visible style={{ width: '100%' }}>\r\n                    <Button \r\n                        fluid\r\n                        color='teal' \r\n                        content={profile.following ? 'Following' : 'Not Following'} />\r\n            </Reveal.Content>\r\n            <Reveal.Content hidden style={{ width: '100%' }}>\r\n                    <Button\r\n                        fluid\r\n                        basic\r\n                        color={profile.following ? 'red' : 'green'}\r\n                        content={profile.following ? \"Unfollow\" : \"Follow\"}\r\n                        loading={loading}\r\n                        onClick={(e) => handleFollow(e, profile.username)}\r\n                    />\r\n        </Reveal.Content>\r\n    </Reveal>\r\n    )\r\n\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Card, Icon, Image } from \"semantic-ui-react\";\r\nimport { Profile } from \"../../app/models/profile\";\r\nimport FollowButton from \"./FollowButton\";\r\n\r\ninterface Props{\r\n    profile: Profile;\r\n\r\n\r\n}\r\n\r\nexport default observer(function ProfileCard({profile} : Props){\r\n\r\n    function truncate(str: string | undefined) {\r\n        if (str) {\r\n        return str.length > 40 ? str.substring(0, 37) + '...' : str;\r\n        }\r\n    }\r\n    return (\r\n        <Card as={Link} to={`/profiles/${profile.username}`}>\r\n            <Image src={profile.image || 'assets/user.png'}/>\r\n            <Card.Content>\r\n                <Card.Header>{profile.displayName}</Card.Header>\r\n                <Card.Description>{truncate(profile.bio)}</Card.Description>\r\n            </Card.Content>\r\n            <Card.Content extra>\r\n                <Icon name='user'/>\r\n                    {profile.followersCount} followers\r\n            </Card.Content>\r\n            <FollowButton profile={profile}/>\r\n        </Card>\r\n    )\r\n\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Image, List, Popup } from \"semantic-ui-react\";\r\nimport { Profile } from \"../../../app/models/profile\";\r\nimport ProfileCard from \"../../profiles/ProfileCard\";\r\n\r\ninterface Props {\r\n    attendees: Profile[];\r\n}\r\n\r\nexport default observer(function ActivityListItemAttendee({ attendees }: Props) {\r\n\r\n    const styles = {\r\n        borderColor: 'orange',\r\n        borderWidth: 3\r\n    }\r\n    return (\r\n        <List horizontal>\r\n            {attendees.map(attendee => (\r\n                <Popup\r\n                hoverable\r\n                key={attendee.username}\r\n                trigger={\r\n                            <List.Item key={attendee.username} as={Link} to={`/profiles/${attendee.username}`}>\r\n                            <Image \r\n                            size='mini' \r\n                            circular src={attendee.image || '/assets/user.png'} \r\n                            bordered\r\n                            style={attendee.following ? styles : null}\r\n                            />\r\n                            </List.Item>\r\n                        }>\r\n                    <Popup.Content>\r\n                        <ProfileCard profile={attendee} />\r\n                    </Popup.Content>\r\n                </Popup>\r\n            \r\n            ))}\r\n        </List>\r\n    )\r\n\r\n})","import { Link } from \"react-router-dom\";\r\nimport { Button, Icon, Item, Label, Segment } from \"semantic-ui-react\";\r\nimport { Activity } from \"../../../app/models/activity\";\r\nimport React from 'react';\r\nimport { format } from 'date-fns';\r\nimport ActivityListItemAttendee from \"./ActivityListItemAttendee\";\r\n\r\ninterface Props {\r\n    activity: Activity\r\n\r\n}\r\n\r\nexport default function ActivityListItem({ activity }: Props) {\r\n\r\n    return (\r\n        <Segment.Group>\r\n            <Segment>\r\n                {activity.isCancelled &&\r\n                    <Label attached='top' color='red' content='Cancelled' style={{ textAlign: 'center' }} />\r\n                }\r\n                <Item.Group>\r\n                    <Item>\r\n                        <Item.Image style={{ marginBottom: 3 }} size='tiny' circular src={activity.host?.image || '/assets/user.png'} />\r\n                        <Item.Content>\r\n                            <Item.Header as={Link} to={`/activities/${activity.id}`}>\r\n                                {activity.title}\r\n                            </Item.Header>\r\n                            <Item.Description> Hosted by  <Link to={`/profiles/${activity.hostUsername}`}>{activity.host?.displayName}</Link>   </Item.Description>\r\n                            {activity.isHost && (\r\n                                <Item.Description>\r\n                                    <Label basic color='orange'>\r\n                                        You are hosting this activity\r\n                                    </Label>\r\n                                </Item.Description>\r\n                            )}\r\n                            {activity.isGoing && !activity.isHost && (\r\n                                <Item.Description>\r\n                                    <Label basic color='green'>\r\n                                        You are going to this activity\r\n                                    </Label>\r\n                                </Item.Description>\r\n                            )}\r\n                        </Item.Content>\r\n                    </Item>\r\n                </Item.Group>\r\n            </Segment>\r\n            <Segment>\r\n                <span>\r\n                    <Icon name='clock' /> {format(activity.date!, 'dd MMM yyyy h:mm aa')}\r\n                    <Icon name='marker' /> {activity.venue}\r\n                </span>\r\n            </Segment>\r\n            <Segment secondary>\r\n                <ActivityListItemAttendee attendees={activity.attendees!} />\r\n            </Segment>\r\n            <Segment clearing>\r\n                <span>\r\n                    {activity.description}\r\n                </span>\r\n                <Button\r\n                    as={Link}\r\n                    to={`/activities/${activity.id}`}\r\n                    color='teal'\r\n                    floated='right'\r\n                    content='View'\r\n                />\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n}\r\n\r\n","import { observer } from 'mobx-react-lite';\r\nimport { Fragment } from 'react';\r\nimport { Header } from 'semantic-ui-react';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport ActivityListItem from './ActivityListItem';\r\n\r\n\r\nexport default observer(function ActivityList() {\r\n    const { activityStore } = useStore();\r\n    const { groupedActivities } = activityStore;\r\n\r\n    return (\r\n        <>\r\n            {groupedActivities.map(([group, activities]) => (\r\n                <Fragment key={group}>\r\n                    <Header sub color='teal'>\r\n                        {group}\r\n                    </Header>\r\n                    {activities.map(activity => (\r\n                        <ActivityListItem key={activity.id} activity={activity} />\r\n                    ))}\r\n                </Fragment>\r\n            ))}\r\n        </>\r\n    )\r\n\r\n})","import React, { Fragment } from 'react';\r\nimport { Segment, Button, Placeholder } from 'semantic-ui-react';\r\n\r\nexport default function ActivityListItemPlaceholder() {\r\n    return (\r\n        <Fragment>\r\n            <Placeholder fluid style={{ marginTop: 25 }}>\r\n                <Segment.Group>\r\n                    <Segment style={{ minHeight: 110 }}>\r\n                        <Placeholder>\r\n                            <Placeholder.Header image>\r\n                                <Placeholder.Line />\r\n                                <Placeholder.Line />\r\n                            </Placeholder.Header>\r\n                            <Placeholder.Paragraph>\r\n                                <Placeholder.Line />\r\n                            </Placeholder.Paragraph>\r\n                        </Placeholder>\r\n                    </Segment>\r\n                    <Segment>\r\n                        <Placeholder>\r\n                            <Placeholder.Line />\r\n                            <Placeholder.Line />\r\n                        </Placeholder>\r\n                    </Segment>\r\n                    <Segment secondary style={{ minHeight: 70 }} />\r\n                    <Segment clearing>\r\n                        <Button disabled color='blue' floated='right' content='View' />\r\n                    </Segment>\r\n                </Segment.Group>\r\n            </Placeholder>\r\n        </Fragment>\r\n    );\r\n};\r\n","import { observer } from 'mobx-react-lite';\r\nimport { useEffect, useState } from 'react';\r\nimport InfiniteScroll from 'react-infinite-scroller';\r\nimport { Grid, Loader } from 'semantic-ui-react';\r\nimport { PagingParams } from '../../../app/models/pagination';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport ActivityFilters from './ActivityFilters';\r\nimport ActivityList from './ActivityList';\r\nimport ActivityListItemPlaceholder from './activityListItemPlaceholder';\r\n\r\n\r\nexport default observer(function ActivityDashboard() {\r\n    const { activityStore } = useStore();\r\n    const {loadActivities, activityRegistry, setPagingParams, pagination} = activityStore;\r\n    const [loadingNext, setLoadingNext] = useState(false);\r\n\r\n    function handleGetNext()\r\n    {\r\n        setLoadingNext(true);\r\n        setPagingParams(new PagingParams(pagination!.currentPage + 1))\r\n        loadActivities().then(() => setLoadingNext(false))\r\n    }\r\n    useEffect(() => {\r\n      if (activityRegistry.size <= 1) loadActivities();\r\n    }, [activityRegistry.size, loadActivities])\r\n  \r\n    return (\r\n        <Grid>\r\n            <Grid.Column width='10'>\r\n                {activityStore.loadingInitial && !loadingNext ? (\r\n                    <> \r\n                        <ActivityListItemPlaceholder />\r\n                        <ActivityListItemPlaceholder />\r\n                    </>\r\n                ) : (\r\n\r\n                    <InfiniteScroll\r\n                    pageStart={0}\r\n                    loadMore={handleGetNext}\r\n                    hasMore={!loadingNext && !!pagination && pagination.currentPage < pagination.totalPages} \r\n                    initialLoad={false}\r\n                    >\r\n                    <ActivityList />\r\n                    </InfiniteScroll>\r\n                )}\r\n                \r\n                \r\n            </Grid.Column>\r\n            <Grid.Column width='6'>\r\n               <ActivityFilters />\r\n            </Grid.Column>\r\n            <Grid.Column width={10}>\r\n                <Loader active={loadingNext} />\r\n            </Grid.Column>\r\n\r\n        </Grid>\r\n    )\r\n\r\n})","import { useField } from 'formik';\r\nimport React from 'react';\r\nimport { Form, Label } from 'semantic-ui-react';\r\n\r\ninterface Props{\r\n    placeholder: string;\r\n    name: string;\r\n    type?: string;\r\n    label?: string;\r\n}\r\n\r\nexport default function MyTextInput(props: Props){\r\n    const [field, meta] = useField(props.name);\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>{props.label}</label>\r\n            <input {...field} {...props}/>\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ): null}\r\n        </Form.Field>\r\n    )\r\n}","import { ErrorMessage, Form, Formik } from 'formik';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Button, Header, Label } from 'semantic-ui-react';\r\nimport MyTextInput from '../../app/common/form/MyTextInput';\r\nimport { useStore } from '../../app/stores/store';\r\n\r\nexport default observer(function LoginForm() {\r\n    const {userStore} = useStore();\r\n    return (\r\n        <Formik\r\n            initialValues={{email: '', password: '', error: null}}\r\n            onSubmit={(values, {setErrors}) => userStore.login(values).catch(error => \r\n                setErrors({error: \"Invalid email or password\"}))}\r\n         >\r\n           {({handleSubmit, isSubmitting, errors}) => (\r\n              <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\r\n                  <Header as='h2' content='Login to Reactivities' color='teal' textAlign='center' />\r\n                  <MyTextInput name='email' placeholder='Email' />\r\n                  <MyTextInput name='password' placeholder='Password' type='password'/>\r\n                  <ErrorMessage name='error' render={() => <Label style={{marginBottom: 10}} basic color='red'content={errors.error}/>}/>\r\n                  <Button loading={isSubmitting} positive content='Login' type='submit' fluid />\r\n                </Form>\r\n           )}    \r\n        </Formik>\r\n    )\r\n\r\n})","import React from 'react';\r\nimport { Message } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n    // errors : string[] | null;\r\n    errors : any;\r\n\r\n}\r\n\r\nexport default function ValidationErrors({errors}: Props){\r\n    return (\r\n        <Message error>\r\n            {errors && (\r\n                <Message.List>\r\n                    {errors.map((err: any, indexOfItem : any) => (\r\n                        <Message.Item key={indexOfItem}> \r\n                            {err}\r\n                        </Message.Item>\r\n                    ))}\r\n                </Message.List>\r\n            )}\r\n        </Message>\r\n    )\r\n\r\n}","import { ErrorMessage, Form, Formik } from 'formik';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { Button, Header } from 'semantic-ui-react';\r\nimport MyTextInput from '../../app/common/form/MyTextInput';\r\nimport { useStore } from '../../app/stores/store';\r\nimport * as Yup from 'yup';\r\nimport ValidationErrors from '../errors/ValidationErros';\r\nexport default observer(function RegisterForm() {\r\n    const {userStore} = useStore();\r\n    return (\r\n        <Formik\r\n            initialValues={{displayName: '', username: '', email: '', password: '', error: null}}\r\n            onSubmit={(values, {setErrors}) => userStore.register(values).catch(error => \r\n                setErrors({error}))}\r\n                validationSchema={Yup.object({\r\n                    displayName: Yup.string().required(),\r\n                    username: Yup.string().required(),\r\n                    email: Yup.string().required().email(),\r\n                    password: Yup.string().required(),\r\n\r\n                })}\r\n         >\r\n           {({handleSubmit, isSubmitting, errors, isValid, dirty}) => (\r\n              <Form className='ui form error' onSubmit={handleSubmit} autoComplete='off'>\r\n                  <Header as='h2' content='Sign up to Reactivities' color='teal' textAlign='center' />\r\n                  <MyTextInput name='displayName' placeholder='Display Name' />\r\n                  <MyTextInput name='username' placeholder='Username' />\r\n                  <MyTextInput name='email' placeholder='Email' />\r\n                  <MyTextInput name='password' placeholder='Password' type='password'/>\r\n                  <ErrorMessage \r\n                  name='error' \r\n                  render={() => <ValidationErrors errors={errors.error}/> }\r\n\r\n                  />\r\n                  <Button disabled={!isValid || !dirty || isSubmitting} \r\n                  loading={isSubmitting} positive content='Register' type='submit' fluid />\r\n                </Form>\r\n           )}    \r\n        </Formik>\r\n    )\r\n\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, Container, Divider, Header, Image, Segment } from 'semantic-ui-react';\r\nimport { useStore } from '../../app/stores/store';\r\nimport LoginForm from '../users/LoginForm';\r\nimport RegisterForm from '../users/RegisterForm';\r\n\r\n\r\nexport default observer(function HomePage() {\r\n    const { userStore, modalStore } = useStore();\r\n    return (\r\n        <Segment inverted textAlign='center' vertical className='masthead'>\r\n            <Container text>\r\n                <Header as='h1' inverted>\r\n                    <Image size='massive' src='/assets/logo.png' alt='logo' style={{ marginBottom: 12 }} />\r\n                    Reactivities\r\n                </Header>\r\n                {\r\n                    userStore.isLoggedIn ? (\r\n                        <>\r\n                            <Header as='h2' inverted content='Welcome to Reactivities' />\r\n                            <Button as={Link} to='/activities' size='huge' inverted>\r\n                                Go to activities!\r\n                            </Button>\r\n                        </>\r\n                    ) : (\r\n                        <>\r\n                            <Button onClick={() => modalStore.openModal(<LoginForm />)} size='huge' inverted>\r\n                                Login!\r\n                            </Button>\r\n                            <Button onClick={() => modalStore.openModal(<RegisterForm />)} size='huge' inverted>\r\n                                Register!\r\n                            </Button>\r\n                            <Divider horizontal inverted>\r\n                                Or\r\n                            </Divider>\r\n                            <Button \r\n                                loading={userStore.fbLoading}\r\n                                size='huge'\r\n                                inverted\r\n                                color='facebook'\r\n                                content='Login with Facebook'\r\n                                onClick={userStore.facebookLogin}\r\n                                \r\n                            />\r\n                        </>\r\n\r\n\r\n                    )\r\n                }\r\n            </Container>\r\n        </Segment>\r\n    )\r\n})","import React from 'react';\r\nimport { Dimmer, Loader } from 'semantic-ui-react';\r\n\r\ninterface Props{\r\n    inverted?: boolean;\r\n    content?: string;\r\n}\r\n\r\n\r\nexport default function LoadingComponent({inverted = true, content = 'Loading...'} : Props) \r\n{\r\n    return (\r\n        <Dimmer active={true} inverted={inverted} > \r\n        <Loader content={content}/> \r\n        </Dimmer>\r\n\r\n    )\r\n\r\n}","import { useField } from 'formik';\r\nimport React from 'react';\r\nimport { Form, Label } from 'semantic-ui-react';\r\n\r\ninterface Props{\r\n    placeholder: string;\r\n    name: string;\r\n    rows: number;\r\n    label?: string;\r\n}\r\n\r\nexport default function MyTextArea(props: Props){\r\n    const [field, meta] = useField(props.name);\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>{props.label}</label>\r\n            <textarea {...field} {...props}/>\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ): null}\r\n        </Form.Field>\r\n    )\r\n}","import { useField } from 'formik';\r\nimport React from 'react';\r\nimport { Form, Label, Select } from 'semantic-ui-react';\r\n\r\ninterface Props{\r\n    placeholder: string;\r\n    name: string;\r\n    options: any;\r\n    label?: string;\r\n}\r\n\r\nexport default function MySelectInput(props: Props){\r\n    const [field, meta, helpers] = useField(props.name);\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>{props.label}</label>\r\n            <Select \r\n                clearable\r\n                options={props.options}\r\n                value={field.value || null}\r\n                onChange={(e, d) => helpers.setValue(d.value)}\r\n                onBlur={() => helpers.setTouched(true)}\r\n                placeholder={props.placeholder}\r\n            />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ): null}\r\n        </Form.Field>\r\n    )\r\n}","export const categoryOptions = [\r\n    {text: 'Drinks', value: 'drinks'},\r\n    {text: 'Culture', value: 'culture'},\r\n    {text: 'Film', value: 'film'},\r\n    {text: 'Food', value: 'food'},\r\n    {text: 'Music', value: 'music'},\r\n    {text: 'Travel', value: 'travel'},\r\n]","import { useField } from 'formik';\r\nimport React from 'react';\r\nimport { Form, Label } from 'semantic-ui-react';\r\nimport DatePicker, {ReactDatePickerProps} from 'react-datepicker';\r\n\r\n\r\n\r\nexport default function MyDateInput(props: Partial<ReactDatePickerProps>){\r\n    const [field, meta, helpers] = useField(props.name!);\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <DatePicker \r\n                {...field}\r\n                {...props}\r\n                selected={(field.value && new Date(field.value)) || null}\r\n                onChange={value => helpers.setValue(value)}\r\n            />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ): null}\r\n        </Form.Field>\r\n    )\r\n}","import { observer } from 'mobx-react-lite';\r\nimport { useEffect, useState } from 'react';\r\nimport { useHistory, useParams } from 'react-router';\r\nimport { Button, Header, Segment } from 'semantic-ui-react';\r\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport { v4 as uuid } from 'uuid';\r\nimport { Link } from 'react-router-dom';\r\nimport { Formik, Form } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport MyTextInput from '../../../app/common/form/MyTextInput';\r\nimport MyTextArea from '../../../app/common/form/MyTextArea';\r\nimport MySelectInput from '../../../app/common/form/MySelectInput';\r\nimport { categoryOptions } from '../../../app/common/options/categoryOptions';\r\nimport MyDateInput from '../../../app/common/form/MyDateInput';\r\nimport { ActivityFormValues } from '../../../app/models/activity';\r\n\r\nexport default observer(function ActivityForm() {\r\n    const history = useHistory();\r\n    const { activityStore } = useStore();\r\n    const { createActivity, updateActivity,\r\n         loadActivity, loadingInitial } = activityStore;\r\n    const { id } = useParams<{ id: string }>();\r\n\r\n    const [activity, setActivity] = useState<ActivityFormValues>(new ActivityFormValues());\r\n\r\n    const validationSchema = Yup.object({\r\n        title: Yup.string().required('The activity title is required'),\r\n        description: Yup.string().required('The activity description is required'),\r\n        category: Yup.string().required(),\r\n        date: Yup.string().required('Date is required').nullable(),\r\n        city: Yup.string().required(),\r\n        venue: Yup.string().required(),\r\n\r\n\r\n    })\r\n    useEffect(() => {\r\n        if (id) loadActivity(id).then(activity => setActivity(new ActivityFormValues(activity)))\r\n    }, [id, loadActivity])\r\n\r\n\r\n    function handleFormSubmit(activity: ActivityFormValues) {\r\n        if (!activity.id) {\r\n            let newActvity = {\r\n                ...activity,\r\n                id: uuid()\r\n            };\r\n            createActivity(newActvity).then(() => history.push(`/activities/${newActvity.id}`))\r\n        } else {\r\n            updateActivity(activity).then(() => history.push(`/activities/${activity.id}`))\r\n\r\n        }\r\n    }\r\n\r\n\r\n    if (loadingInitial) return <LoadingComponent content='Loading activity...' />\r\n\r\n    return (\r\n        <Segment clearing>\r\n            <Header content='Activity Details' sub color='teal' />\r\n            <Formik\r\n                validationSchema={validationSchema}\r\n                enableReinitialize\r\n                initialValues={activity}\r\n                onSubmit={values => handleFormSubmit(values)}>\r\n                {({ handleSubmit, isValid, isSubmitting, dirty }) => (\r\n                    <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\r\n                        <MyTextInput name='title' placeholder='Title' />\r\n                        <MyTextArea rows={3} placeholder='Description' name='description' />\r\n                        <MySelectInput options={categoryOptions} placeholder='Category' name='category' />\r\n                        <MyDateInput\r\n                            placeholderText='Date'\r\n                            name='date'\r\n                            showTimeSelect\r\n                            timeCaption='time'\r\n                            dateFormat='MMMM d, yyyy h:mm aa'\r\n                        />\r\n                        <Header content='Location Details' sub color='teal' />\r\n                        <MyTextInput placeholder='City' name='city' />\r\n                        <MyTextInput placeholder='Venue' name='venue' />\r\n                        <Button\r\n                            disabled={isSubmitting || !dirty || !isValid}\r\n                            loading={isSubmitting} floated='right'\r\n                            positive type='submit'content='Submit' />\r\n                        <Button as={Link} to='/activities' floated='right' type='submit' content='Cancel' />\r\n                    </Form>\r\n\r\n                )}\r\n            </Formik>\r\n\r\n        </Segment>\r\n    )\r\n\r\n})\r\n","import { Formik, Form, Field, FieldProps } from 'formik'\r\nimport { observer } from 'mobx-react-lite'\r\nimport React, { useEffect } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { Segment, Header, Comment, Loader } from 'semantic-ui-react'\r\nimport { useStore } from '../../../app/stores/store'\r\nimport * as Yup from 'yup';\r\nimport { formatDistanceToNow } from 'date-fns'\r\n\r\ninterface Props {\r\n    activityId: string;\r\n}\r\n\r\n\r\n\r\nexport default observer(function ActivityDetailedChat({ activityId }: Props) {\r\n\r\n    const { commentStore } = useStore();\r\n\r\n    useEffect(() => {\r\n        if (activityId) {\r\n            commentStore.createHubConnection(activityId);\r\n        }\r\n        return () => {\r\n            commentStore.clearComments();\r\n        }\r\n    }, [commentStore, activityId]);\r\n\r\n    return (\r\n        <>\r\n            <Segment\r\n                textAlign='center'\r\n                attached='top'\r\n                inverted\r\n                color='teal'\r\n                style={{ border: 'none' }}\r\n            >\r\n                <Header>Chat about this event</Header>\r\n            </Segment>\r\n            <Segment clearing>\r\n                <Formik\r\n                    onSubmit={(values, { resetForm }) => commentStore.addComment(values).then(() => resetForm())}\r\n                    initialValues={{ body: '' }}\r\n                    validationSchema={Yup.object({\r\n                        body: Yup.string().required()\r\n                    })}\r\n                >\r\n                    {({ isSubmitting, isValid, handleSubmit }) => (\r\n                        <Form className='ui form'>\r\n                            <Field name='body'>\r\n                                {(props: FieldProps) => (\r\n                                    <div style={{ position: 'relative' }}>\r\n                                        <Loader active={isSubmitting} />\r\n                                        <textarea\r\n                                            placeholder='Enter your comment (Enter to submit, SHIFT + enter for new line)'\r\n                                            rows={2}\r\n                                            {...props.field}\r\n                                            onKeyPress={e => {\r\n                                                if (e.key === 'Enter' && e.shiftKey) {\r\n                                                    return;\r\n                                                }\r\n                                                if (e.key === 'Enter' && !e.shiftKey) {\r\n                                                    e.preventDefault();\r\n                                                    isValid && handleSubmit();\r\n                                                }\r\n                                            }}\r\n                                        />\r\n                                    </div>\r\n                                )}\r\n                            </Field>\r\n                        </Form>\r\n\r\n                    )}\r\n                </Formik>\r\n                <Comment.Group>\r\n                    {commentStore.comments.map(comment => (\r\n                        <Comment key={comment.id}>\r\n                            <Comment.Avatar src={comment.image || '/assets/user.png'} />\r\n                            <Comment.Content>\r\n                                <Comment.Author as={Link} to={`/profiles/${comment.username}`} >{comment.displayName}</Comment.Author>\r\n                                <Comment.Metadata>\r\n                                    <div>{formatDistanceToNow(comment.createdAt)} ago</div>\r\n                                </Comment.Metadata>\r\n                                <Comment.Text style={{ whiteSpace: 'pre-wrap' }}>{comment.body}</Comment.Text>\r\n                            </Comment.Content>\r\n                        </Comment>\r\n\r\n                    ))}\r\n                </Comment.Group>\r\n            </Segment>\r\n        </>\r\n\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport {Button, Header, Item, Segment, Image, Label} from 'semantic-ui-react'\r\nimport {Activity} from \"../../../app/models/activity\";\r\nimport {format} from 'date-fns';\r\nimport { useStore } from '../../../app/stores/store';\r\n\r\nconst activityImageStyle = {\r\n    filter: 'brightness(30%)'\r\n};\r\n\r\nconst activityImageTextStyle = {\r\n    position: 'absolute',\r\n    bottom: '5%',\r\n    left: '5%',\r\n    width: '100%',\r\n    height: 'auto',\r\n    color: 'white'\r\n};\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default observer (function ActivityDetailedHeader({activity}: Props) {\r\n    const {activityStore: {updateAttendance, loading, cancelActivityToggle}} = useStore();\r\n    return (\r\n        <Segment.Group>\r\n            <Segment basic attached='top' style={{padding: '0'}}>\r\n                {activity.isCancelled && \r\n                    <Label style={{position: 'absolute', zIndex: 1000, left: -14, top: 20}}\r\n                        ribbon color='red' content='Cancelled'\r\n                    />\r\n                }\r\n                <Image src={`/assets/categoryImages/${activity.category}.jpg`} fluid style={activityImageStyle}/>\r\n                <Segment style={activityImageTextStyle} basic>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Content>\r\n                                <Header\r\n                                    size='huge'\r\n                                    content={activity.title}\r\n                                    style={{color: 'white'}}\r\n                                />\r\n                                <p>{format(activity.date!, 'dd MMM yyyy')}</p>\r\n                                <p>\r\n                                    Hosted by <strong><Link to={`/profiles/${activity.host?.username}`}>{activity.host?.displayName}</Link></strong>\r\n                                </p>\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Segment>\r\n            </Segment>\r\n            <Segment clearing attached='bottom'>\r\n                {activity.isHost ? (\r\n                    <> \r\n                    <Button \r\n                    color={activity.isCancelled ? 'green' : 'red'}\r\n                    floated='left'\r\n                    basic\r\n                    content={activity.isCancelled ? 'Re-activate Activity' : 'Cancel Activity'}\r\n                    onClick={cancelActivityToggle}\r\n                    loading={loading}\r\n                    />\r\n                    <Button as={Link}\r\n                    disabled={activity.isCancelled}\r\n                    to={`/manage/${activity.id}`}\r\n                    color='orange' floated='right'>\r\n                    Manage Event\r\n                    </Button>\r\n                    </>\r\n              \r\n                ): activity.isGoing ? (\r\n                    <Button loading={loading} onClick={updateAttendance}>Cancel attendance</Button>\r\n\r\n                ) : (\r\n                    <Button disabled={activity.isCancelled} loading={loading} onClick={updateAttendance} color='teal'>Join Activity</Button>\r\n                )}\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport {Segment, Grid, Icon} from 'semantic-ui-react'\r\nimport {Activity} from \"../../../app/models/activity\";\r\nimport {format} from 'date-fns';\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default observer(function ActivityDetailedInfo({activity}: Props) {\r\n    return (\r\n        <Segment.Group>\r\n            <Segment attached='top'>\r\n                <Grid>\r\n                    <Grid.Column width={1}>\r\n                        <Icon size='large' color='teal' name='info'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n                        <p>{activity.description}</p>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width={1}>\r\n                        <Icon name='calendar' size='large' color='teal'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n            <span>\r\n              {format(activity.date!, 'dd MMM yyyy h:mm aa')}\r\n            </span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width={1}>\r\n                        <Icon name='marker' size='large' color='teal'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={11}>\r\n                        <span>{activity.venue}, {activity.city}</span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n})\r\n","import React from 'react'\r\nimport { Segment, List, Label, Item, Image } from 'semantic-ui-react'\r\nimport { Link } from 'react-router-dom'\r\nimport { observer } from 'mobx-react-lite'\r\nimport { Activity } from '../../../app/models/activity'\r\n\r\n\r\ninterface Props {\r\n    activity: Activity;\r\n}\r\nexport default observer(function ActivityDetailedSidebar({ activity: {attendees, host} }: Props) {\r\n    if(!attendees) return null;\r\n    return (\r\n        <>\r\n            <Segment\r\n                textAlign='center'\r\n                style={{ border: 'none' }}\r\n                attached='top'\r\n                secondary\r\n                inverted\r\n                color='teal'\r\n            >\r\n                {attendees.length} {attendees.length === 1 ? 'Person' : 'People'} going\r\n            </Segment>\r\n            <Segment attached>\r\n                <List relaxed divided>\r\n                    {attendees.map(attendee => (\r\n\r\n                        <Item style={{ position: 'relative' }} key={attendee.username}>\r\n                            {attendee.username === host?.username &&\r\n                            <Label\r\n                                style={{ position: 'absolute' }}\r\n                                color='orange'\r\n                                ribbon='right'\r\n                            >\r\n                                Host\r\n                            </Label>}\r\n                            <Image size='tiny' src={attendee.image || '/assets/user.png'} />\r\n                            <Item.Content verticalAlign='middle'>\r\n                                <Item.Header as='h3'>\r\n                                    <Link to={`/profiles/${attendee.username}`}>{attendee.displayName}</Link>\r\n                                </Item.Header>\r\n                                {attendee.following &&\r\n                                <Item.Extra style={{ color: 'orange' }}>Following</Item.Extra>}\r\n                            </Item.Content>\r\n                        </Item>\r\n                    ))}\r\n\r\n\r\n\r\n                </List>\r\n            </Segment>\r\n        </>\r\n\r\n    )\r\n})\r\n","import { observer } from 'mobx-react-lite';\r\nimport { useEffect } from 'react';\r\nimport { useParams } from 'react-router';\r\nimport { Grid } from 'semantic-ui-react';\r\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport ActivityDetailedChat from './ActivityDetailedChat';\r\nimport ActivityDetailedHeader from './ActivityDetailedHeader';\r\nimport ActivityDetailedInfo from './ActivityDetailedInfo';\r\nimport ActivityDetailedSidebar from './activityDetailedSidebar';\r\n\r\n\r\n\r\nexport default observer(function ActivityDetails() {\r\n    const {activityStore} = useStore();\r\n    const {selectedActivity: activity, loadActivity, loadingInitial, clearSelectedActivity} = activityStore;\r\n    const {id} = useParams<{id: string}>();\r\n    \r\n    useEffect(() => {\r\n        if(id) loadActivity(id);\r\n        return () => clearSelectedActivity();\r\n    }, [id, loadActivity, clearSelectedActivity])\r\n\r\n    if (loadingInitial || !activity) return <LoadingComponent />;\r\n    \r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={10}>\r\n                <ActivityDetailedHeader activity={activity}/>\r\n                <ActivityDetailedInfo activity={activity}/>\r\n                <ActivityDetailedChat activityId={activity.id}/>\r\n            </Grid.Column>\r\n            <Grid.Column width={6}>\r\n                <ActivityDetailedSidebar activity={activity!}/>\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n\r\n})","import React, { useState } from 'react';\r\nimport {Button, Header, Segment} from \"semantic-ui-react\";\r\nimport axios from 'axios';\r\nimport ValidationErrors from './ValidationErros';\r\n\r\nexport default function TestErrors() {\r\n    const baseUrl = process.env.REACT_APP_API_URL;\r\n    const [errors, setErrors] = useState(null);\r\n\r\n    function handleNotFound() {\r\n        axios.get(baseUrl + 'buggy/not-found').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleBadRequest() {\r\n        axios.get(baseUrl + 'buggy/bad-request').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleServerError() {\r\n        axios.get(baseUrl + 'buggy/server-error').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleUnauthorised() {\r\n        axios.get(baseUrl + 'buggy/unauthorised').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleBadGuid() {\r\n        axios.get(baseUrl + 'activities/notaguid').catch(err => console.log(err));\r\n    }\r\n\r\n    function handleValidationError() {\r\n        axios.post(baseUrl + 'activities', {}).catch(err => setErrors(err)); // just err because we return an array and not an object now\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Header as='h1' content='Test Error component' />\r\n            <Segment>\r\n                <Button.Group widths='7'>\r\n                    <Button onClick={handleNotFound} content='Not Found' basic primary />\r\n                    <Button onClick={handleBadRequest} content='Bad Request' basic primary />\r\n                    <Button onClick={handleValidationError} content='Validation Error' basic primary />\r\n                    <Button onClick={handleServerError} content='Server Error' basic primary />\r\n                    <Button onClick={handleUnauthorised} content='Unauthorised' basic primary />\r\n                    <Button onClick={handleBadGuid} content='Bad Guid' basic primary />\r\n                </Button.Group>\r\n            </Segment>\r\n            {errors &&\r\n                <ValidationErrors errors={errors}/>\r\n            }\r\n        </>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, Header, Icon, Segment } from 'semantic-ui-react';\r\n\r\nexport default function NotFound() {\r\n    return (\r\n        <Segment placeholder>\r\n            <Header icon>\r\n                <Icon name='search' />\r\n                Oops - we've looked everywhere and could not find this.\r\n            </Header>\r\n            <Segment.Inline>\r\n                <Button as={Link} to='/activities' primary>\r\n                    Return to activities page\r\n                </Button>\r\n            </Segment.Inline>\r\n        </Segment>\r\n    )\r\n}","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Container, Header, Segment } from 'semantic-ui-react';\r\nimport { useStore } from '../../app/stores/store';\r\n\r\nexport default observer(function ServerError(){\r\n    const {commonStore} = useStore();\r\n    return (\r\n        <Container>\r\n            <Header as='h1' content='Server Error'/>\r\n            <Header sub as='h5' color='red' content={commonStore.error?.message}/>\r\n            {commonStore.error?.details &&\r\n                <Segment>\r\n                    <Header as='h4' content='Stack trace' color='teal'/>\r\n                    <code style={{marginTop: '10px'}}>{commonStore.error.details}</code>\r\n                </Segment>\r\n            \r\n            }\r\n        </Container>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Modal } from 'semantic-ui-react';\r\nimport { useStore } from '../../stores/store';\r\n\r\nexport default observer(function ModalContainer() {\r\n    const {modalStore} = useStore();\r\n    return (\r\n        <Modal open={modalStore.modal.open} onClose={modalStore.closeModal} size='mini'>\r\n            <Modal.Content>\r\n                {modalStore.modal.body}\r\n            </Modal.Content>\r\n\r\n        </Modal>\r\n    )\r\n})","import { Form, Formik } from \"formik\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { Button } from \"semantic-ui-react\";\r\nimport MyTextArea from \"../../app/common/form/MyTextArea\";\r\nimport MyTextInput from \"../../app/common/form/MyTextInput\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport * as Yup from 'yup';\r\n\r\ninterface Props{\r\n    setEditMode: (editMode: boolean) => void;\r\n}\r\n\r\nexport default observer(function ProfileEditForm({setEditMode} : Props){\r\n    const {profileStore: {profile, updateProfile}} = useStore();\r\n    return (\r\n        <Formik \r\n        initialValues={{displayName: profile?.displayName, bio: profile?.bio}}\r\n        onSubmit={values => {\r\n            updateProfile(values).then(() => {\r\n                setEditMode(false)\r\n            })\r\n        }}\r\n        validationSchema={Yup.object({\r\n            displayName: Yup.string().required()\r\n        })}\r\n        >\r\n        {({isSubmitting, isValid, dirty}) => (\r\n            <Form className='ui form'>\r\n\r\n            <MyTextInput placeholder='Display Name'\r\n            name='displayName' />\r\n\r\n            <MyTextArea rows={3} placeholder='Add your bio'\r\n            name='bio' />\r\n\r\n\r\n            <Button\r\n                positive\r\n                type='submit'\r\n                loading={isSubmitting}\r\n                content='Update profile'\r\n                floated='right'\r\n                disabled={!isValid || !dirty}\r\n            />\r\n            </Form>\r\n        )}\r\n    \r\n        </Formik>\r\n\r\n    )\r\n\r\n})","import React, {useState} from 'react';\r\nimport {useStore} from \"../../app/stores/store\";\r\nimport {Button, Grid, Header, Tab} from \"semantic-ui-react\";\r\nimport ProfileEditForm from \"./ProfileEdit\";\r\nimport { observer } from 'mobx-react-lite';\r\n\r\n\r\n\r\n\r\nexport default observer(function ProfileAbout(){\r\n\r\n    const {profileStore} = useStore();\r\n    const {isCurrentUser, profile} = profileStore;\r\n    const [editMode, setEditMode] = useState(false);\r\n    return (\r\n        <Tab.Pane>\r\n            <Grid>\r\n                <Grid.Column width='16'>\r\n                    <Header floated='left' icon='user' content={`About ${profile?.displayName}`} />\r\n                    {isCurrentUser && (\r\n                        <Button \r\n                            floated='right'\r\n                            basic\r\n                            content={editMode ? 'Cancel' : 'Edit Profile'}\r\n                            onClick={() => setEditMode(!editMode)}\r\n                        />\r\n                    )}\r\n                </Grid.Column>\r\n                <Grid.Column width='16' >\r\n                    {editMode ? <ProfileEditForm setEditMode={setEditMode} /> :\r\n                    <span style={{whiteSpace: 'pre-wrap'}}>{profile?.bio}</span>\r\n                    //Note: the style ‘whiteSpace: ‘pre-wrap’’ will preserve line breaks that are entered\r\n                    //into the text area here. \r\n                }\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n\r\n    )\r\n\r\n\r\n\r\n\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Card, Grid, Header, Tab } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport ProfileCard from \"./ProfileCard\";\r\n\r\nexport default observer(function ProfileFollowings() {\r\n    const {profileStore} = useStore();\r\n    const {profile, followings, loadingFollowings, activetab} = profileStore;\r\n\r\n    return (\r\n        <Tab.Pane loading={loadingFollowings}> \r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header \r\n                    floated='left' \r\n                    icon='user' \r\n                    content={activetab === 3 ?`People following ${profile?.displayName}` : `People ${profile?.displayName} is following`}\r\n                     \r\n                     \r\n                     />\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    <Card.Group itemsPerRow={4}>\r\n                        {followings.map(profile => (\r\n                            <ProfileCard key={profile.username} profile={profile}/>\r\n                        ))}\r\n                    </Card.Group>\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    )\r\n})","import React from \"react\";\r\nimport 'cropperjs/dist/cropper.css'\r\nimport { Cropper } from \"react-cropper\";\r\n\r\ninterface Props{\r\n    ImagePreview: string;\r\n    setCropper: (cropper: Cropper) => void;\r\n}\r\nexport default function PhotoWidgetCropper({ImagePreview, setCropper} : Props) \r\n{\r\n    return (\r\n        <Cropper \r\n            src={ImagePreview}\r\n            style={{height: 200, width: '100%'}}\r\n            initialAspectRatio={1}\r\n            aspectRatio={1}\r\n            preview='.img-preview'\r\n            guides={false}\r\n            viewMode={1}\r\n            autoCropArea={1}\r\n            background={false}\r\n            onInitialized={cropper => setCropper(cropper)}\r\n        />\r\n\r\n    )\r\n\r\n\r\n}","import React, {useCallback} from 'react'\r\nimport {useDropzone} from 'react-dropzone'\r\nimport { Header, Icon } from 'semantic-ui-react'\r\n\r\ninterface Props{\r\n  setFiles: (files: any) => void;\r\n\r\n}\r\n\r\nexport default function PhotoWidgetDropzone({setFiles} : Props) {\r\n  const dzStyles = {\r\n    border: 'dashed 3px #eee',\r\n    borderColor: '#eee',\r\n    borderRadius: '5px',\r\n    paddingTop: '30px',\r\n    textAlign: 'center' as 'center',\r\n    height: 200\r\n  }\r\n\r\n  const dzActive = {\r\n    borderColor: 'green'\r\n  }\r\n\r\n  const onDrop = useCallback(acceptedFiles => {\r\n    setFiles(acceptedFiles.map((file: any) => Object.assign(file, {\r\n      preview: URL.createObjectURL(file)\r\n    })))\r\n  }, [setFiles])\r\n\r\n  const {getRootProps, getInputProps, isDragActive} = useDropzone({onDrop})\r\n\r\n  return (\r\n    <div {...getRootProps()} style={isDragActive ? {...dzStyles, ...dzActive} : dzStyles}>\r\n      <input {...getInputProps()} />\r\n      <Icon name='upload' size='huge' />\r\n      <Header content='Drop image here'/>\r\n    </div>\r\n  )\r\n}","\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { Button, Grid, Header } from 'semantic-ui-react';\r\nimport PhotoWidgetCropper from \"./PhotoWidgetCropper\";\r\nimport PhotoWidgetDropzone from \"./PhotoWidgetDropzone\";\r\n\r\ninterface Props{\r\n    loading: boolean;\r\n    uploadPhoto: (file: Blob) => void\r\n}\r\n\r\n\r\nexport default function PhotoUploadWidget({loading, uploadPhoto}: Props) {\r\n    const [files, setFiles] = useState<any>([]);\r\n    const [cropper, setCropper] = useState<Cropper>();\r\n\r\n    function onCrop() {\r\n        if (cropper) {\r\n            cropper.getCroppedCanvas().toBlob(blob => uploadPhoto(blob!));\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            files.forEach((file: any) => URL.revokeObjectURL(file.preview))\r\n        }\r\n    }, [files])\r\n\r\n    return (\r\n\r\n        <Grid>\r\n            <Grid.Column width={4}>\r\n                <Header sub color='teal' content='Step 1 - Add Photo' />\r\n                <PhotoWidgetDropzone setFiles={setFiles} />\r\n            </Grid.Column>\r\n            <Grid.Column width={1} />\r\n            <Grid.Column width={4}>\r\n                <Header sub color='teal' content='Step 2 - Resize Image' />\r\n                {files && files.length > 0 && (\r\n                    <PhotoWidgetCropper setCropper={setCropper} ImagePreview={files[0].preview} />\r\n                )}\r\n            </Grid.Column>\r\n            <Grid.Column width={1} />\r\n            <Grid.Column width={4}>\r\n                <Header sub color='teal' content='Step 3 - Preview & Upload' />\r\n                {files && files.length > 0 &&\r\n                    <>\r\n                        <div className='img-preview' style={{ minHeight: 200, overflow: 'hidden' }} />\r\n                        <Button.Group widths={2}>\r\n                            <Button loading={loading} onClick={onCrop} positive icon='check' />\r\n                            <Button disabled={loading} onClick={() => setFiles([])} icon='close' />\r\n                        </Button.Group>\r\n                    </>}\r\n\r\n            </Grid.Column>\r\n        </Grid>\r\n\r\n    )\r\n\r\n}","import { observer } from \"mobx-react-lite\";\r\nimport React, { SyntheticEvent, useState } from \"react\";\r\nimport { Button, Card, Grid, Header, Image, Tab } from \"semantic-ui-react\";\r\nimport PhotoUploadWidget from \"../../app/common/imageUpload/PhotoUploadWidget\";\r\nimport { Photo, Profile } from \"../../app/models/profile\";\r\nimport { useStore } from \"../../app/stores/store\";\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\n\r\nexport default observer(function ProfilePhotos({ profile }: Props) {\r\n    const { profileStore: { isCurrentUser, uploadPhoto,\r\n         uploading, loading, setMainPhoto, deletePhoto } } = useStore();\r\n    const [addPhotoMode, setAddPhotoMode] = useState(false);\r\n    \r\n    const [target, setTarget] = useState('');\r\n\r\n\r\n    function handlePhotoUpload(file: Blob) {\r\n        uploadPhoto(file).then(() => setAddPhotoMode(false));\r\n\r\n    }\r\n\r\n    function handleSetMainPhoto(photo: Photo, e: SyntheticEvent<HTMLButtonElement>) {\r\n        setTarget(e.currentTarget.name);\r\n        setMainPhoto(photo);\r\n    }\r\n    function handleDeletePhoto(photo: Photo, e: SyntheticEvent<HTMLButtonElement>) {\r\n        setTarget(e.currentTarget.name);\r\n        deletePhoto(photo);\r\n    }\r\n\r\n    return (\r\n        <Tab.Pane>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header floated='left' icon='image' content='Photos' />\r\n                    {isCurrentUser && (\r\n                        <Button floated='right' basic\r\n                            content={addPhotoMode ? 'Cancel' : 'Add Photo'}\r\n                            onClick={() => setAddPhotoMode(!addPhotoMode)}\r\n                        />\r\n\r\n                    )}\r\n                </Grid.Column>\r\n\r\n                <Grid.Column width={16}>\r\n                    {addPhotoMode ? (\r\n                        <PhotoUploadWidget uploadPhoto={handlePhotoUpload} loading={uploading}/>\r\n                    ) :\r\n                        <Card.Group itemsPerRow={5} >\r\n                            {profile.photos?.map(photo => (\r\n                                <Card key={photo.id}>\r\n                                    <Image src={photo.url} />\r\n                                    {isCurrentUser &&(\r\n                                        <Button.Group fluid widths={2}>\r\n                                            <Button\r\n                                                basic\r\n                                                color='green'\r\n                                                content='Main'\r\n                                                name={'main' + photo.id}  //adding extra info for the steps below\r\n                                                disabled={photo.isMain}\r\n                                                //giving target extra info, (to avoid having to loading indicators when clicking one of the buttons)\r\n                                                loading={target === 'main' + photo.id && loading}\r\n                                                onClick={e => handleSetMainPhoto(photo, e)}\r\n                                            />\r\n                                            <Button \r\n                                                basic \r\n                                                color='red' \r\n                                                icon='trash'\r\n                                                name={photo.id}\r\n                                                loading={target === photo.id && loading}\r\n                                                onClick={e => handleDeletePhoto(photo, e)}\r\n                                                disabled={photo.isMain}\r\n                                            />\r\n                                        </Button.Group>\r\n                                    )}\r\n                                </Card>\r\n\r\n                            ))}\r\n                        </Card.Group>\r\n\r\n                    }\r\n                </Grid.Column>\r\n            </Grid>\r\n\r\n\r\n        </Tab.Pane>\r\n\r\n    )\r\n\r\n})","import React, { SyntheticEvent, useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Card, Grid, Header, Image, Tab, TabProps} from 'semantic-ui-react';\r\nimport { UserActivity } from '../../app/models/profile';\r\nimport { useStore } from '../../app/stores/store';\r\nimport { format } from 'date-fns';\r\nconst panes = [\r\n    { menuItem: 'Future Events', pane: { key: 'future' } },\r\n    { menuItem: 'Past Events', pane: { key: 'past' } },\r\n    { menuItem: 'Hosting', pane: { key: 'hosting' } }\r\n   ];\r\n\r\nexport default function ProfileActivities() {\r\n\r\n    const { profileStore } = useStore();\r\n    const {\r\n        loadUserActivities,\r\n        profile,\r\n        loadingActivities,\r\n        userActivities\r\n    } = profileStore;\r\n\r\n    useEffect(() => {\r\n        loadUserActivities(profile!.username);\r\n    }, [loadUserActivities, profile]);\r\n\r\n    const handleTabChange = (e: SyntheticEvent, data: TabProps) => {\r\n        loadUserActivities(profile!.username, panes[data.activeIndex as number].pane.key);\r\n    };\r\n\r\n\r\n    return (\r\n        <Tab.Pane loading={loadingActivities} >\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header floated='left' icon='calendar' content={'Activities'} />\r\n\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    <Tab \r\n                        panes={panes}\r\n                        menu={{secondary: true, pointing: true}}\r\n                        onTabChange={(e, data) => handleTabChange(e, data)}\r\n                    />\r\n                    <br />\r\n                    <Card.Group itemsPerRow={4}>\r\n                        {userActivities.map((activity: UserActivity) => (\r\n                            <Card as={Link} to={`/activities/${activity.id}`} key={activity.id} >\r\n                                <Image src={`/assets/categoryImages/${activity.category}.jpg`} style={{ minHeight: 100, objectFit:'cover' }} />\r\n                            <Card.Content>\r\n                                <Card.Header textAlign='center'> {activity.title}</Card.Header>\r\n                                <Card.Meta textAlign='center'>\r\n                                    <div>{format(new Date(activity.date), 'do LLL')}</div>\r\n                                    <div>{format(new Date(activity.date), 'h:mm a')}</div>\r\n                                </Card.Meta>\r\n                            </Card.Content>\r\n                            </Card>\r\n                        ))}\r\n                    </Card.Group>\r\n                </Grid.Column>\r\n            </Grid>\r\n\r\n        </Tab.Pane>\r\n    )\r\n}","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Tab } from \"semantic-ui-react\";\r\nimport { Profile } from \"../../app/models/profile\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport ProfileAbout from \"./ProfileAbout\";\r\nimport ProfileFollwiings from \"./ProfileFollwiings\";\r\nimport ProfilePhotos from \"./ProfilePhotos\";\r\nimport ProfileActivities from \"./‘ProfileActivities’\";\r\n\r\ninterface Props{\r\n    profile: Profile;\r\n\r\n}\r\n\r\nexport default observer(function ProfileContent({profile} : Props){\r\n    const {profileStore} = useStore();\r\n\r\n    const panes = [\r\n            {menuItem: 'About', render: () => <ProfileAbout />},\r\n            {menuItem: 'Photos', render: () => <ProfilePhotos profile={profile}/>},\r\n            {menuItem: 'Events', render: () => <ProfileActivities />},\r\n            {menuItem: 'Followers', render: () => <ProfileFollwiings />},\r\n            {menuItem: 'Following', render: () => <ProfileFollwiings />},\r\n\r\n    ];\r\n    return (\r\n        <Tab \r\n            menu={{fluid: true, vertical: true}}\r\n            menuPosition='right'\r\n            panes={panes}\r\n            onTabChange={(e, data) => profileStore.setActiveTab(data.activeIndex)}\r\n        />\r\n    )\r\n\r\n\r\n\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Divider, Grid, Header, Item, Segment, Statistic } from \"semantic-ui-react\";\r\nimport { Profile } from \"../../app/models/profile\";\r\nimport FollowButton from \"./FollowButton\";\r\n\r\ninterface Props{\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function ProfileHeader({profile} : Props) {\r\n\r\n    return (\r\n        <Segment>\r\n            <Grid>\r\n                <Grid.Column width={12}>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Image avatar size='small' src={profile.image || '/assets/user.png'} />\r\n                            <Item.Content verticalAlign='middle'>\r\n                                <Header as='h1' content={profile.displayName} />\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Grid.Column>\r\n                <Grid.Column width={4}>\r\n                    <Statistic.Group widths={2}>\r\n                        <Statistic label='Followers' value={profile.followersCount} />\r\n                        <Statistic label='Following' value={profile.followingCount} />\r\n                    </Statistic.Group>\r\n                    <Divider />\r\n                    <FollowButton profile={profile}/>\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Segment>\r\n    )\r\n\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React, { Fragment, useEffect } from 'react';\r\nimport { useParams } from 'react-router';\r\nimport { Grid } from 'semantic-ui-react';\r\nimport LoadingComponent from '../../app/layout/LoadingComponent';\r\nimport { useStore } from '../../app/stores/store';\r\nimport ProfileContent from './ProfileContent';\r\nimport ProfileHeader from './ProfileHeader';\r\n\r\n\r\nexport default observer(function ProfilePage(){\r\n    const {username} = useParams<{username: string}>();\r\n    const {profileStore} = useStore();\r\n    const {loadingProfile, loadProfile, profile, setActiveTab} = profileStore;\r\n    useEffect(() => {\r\n        loadProfile(username);\r\n        return () => {\r\n            setActiveTab(0);\r\n        }\r\n    }, [loadProfile, username, setActiveTab])\r\n\r\n    if(loadingProfile) return <LoadingComponent content='Loading profile...' />\r\n    return (\r\n\r\n        <Grid>\r\n            <Grid.Column width={16}>\r\n                {profile &&\r\n                <Fragment> \r\n                    <ProfileHeader profile={profile}/>\r\n                    <ProfileContent profile={profile}/>\r\n                </Fragment>\r\n                }\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n\r\n})","import { Redirect, Route, RouteComponentProps, RouteProps } from \"react-router-dom\";\r\nimport { useStore } from \"../stores/store\";\r\n\r\ninterface Props extends RouteProps{\r\n    component: React.ComponentType<RouteComponentProps<any>> | React.ComponentType<any>\r\n\r\n}\r\nexport default function PrivateRoute({component: Component, ...rest}: Props){\r\n    const {userStore: {isLoggedIn}} = useStore();\r\n    return (\r\n        <Route \r\n            {...rest}\r\n            render={(props) => isLoggedIn ? <Component {...props}/> : <Redirect to='/' />}\r\n        \r\n        />\r\n    )\r\n}","import { Fragment } from 'react';\nimport { Container } from 'semantic-ui-react';\nimport NavBar from './NavBar';\nimport ActivityDashboard from '../../features/activities/dashboard/ActivityDashboard';\nimport { observer } from 'mobx-react-lite';\nimport { Route, Switch, useLocation } from 'react-router';\nimport HomePage from '../../features/home/HomePage';\nimport ActivityForm from '../../features/activities/form/ActivityForm';\nimport ActivityDetails from '../../features/activities/details/ActivityDetails';\nimport TestErrors from '../../features/errors/TestError';\nimport { ToastContainer } from 'react-toastify';\nimport NotFound from '../../features/errors/NotFound';\nimport ServerError from '../../features/errors/ServerError';\nimport { useStore } from '../stores/store';\nimport { useEffect } from 'react';\nimport LoadingComponent from './LoadingComponent';\nimport ModalContainer from '../common/modals/ModalContainer';\nimport ProfilePage from '../../features/profiles/ProfilePage';\nimport PrivateRoute from './PrivateRoute';\n\nfunction App() {\n\n  const location = useLocation();\n  const {commonStore, userStore} = useStore();\n  useEffect(() => {\n    if(commonStore.token) {\n      userStore.getUser().finally(() => commonStore.setAppLoaded());\n    } else {\n      userStore.getFacebookLoginStatus().then(() => commonStore.setAppLoaded());\n      \n    }\n  }, [commonStore, userStore])\n\n  if(!commonStore.appLoaded) return <LoadingComponent content='Loading app..' />\n  return (\n    <Fragment>\n      <ToastContainer position='bottom-right' hideProgressBar />\n      <ModalContainer />\n      <Route exact path='/' component={HomePage} />\n      <Route\n        path={'/(.+)'}\n        render={() => (\n          <Fragment>\n            <NavBar />\n            <Container style={{ marginTop: '7em' }}>\n              <Switch>\n              <PrivateRoute exact path='/' component={HomePage} />\n              <PrivateRoute exact path='/activities' component={ActivityDashboard} />\n              <PrivateRoute path='/activities/:id' component={ActivityDetails} />\n              <PrivateRoute key={location.key} path={['/createActivity', '/manage/:id']} component={ActivityForm} />\n              <PrivateRoute path='/profiles/:username' component={ProfilePage} />\n              <PrivateRoute path='/errors' component={TestErrors} />\n              <Route path='/server-error' component={ServerError} />\n              <Route component={NotFound} />\n              </Switch>\n            </Container>\n          </Fragment>\n        )}\n      />\n\n    </Fragment>\n  );\n}\n\nexport default observer(App);\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { useEffect } from \"react\";\r\nimport { useLocation } from \"react-router-dom\";\r\n\r\nexport default function ScrollToTop() {\r\n  const { pathname } = useLocation();\r\n\r\n  useEffect(() => {\r\n    window.scrollTo(0, 0);\r\n  }, [pathname]);\r\n\r\n  return null;\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'semantic-ui-css/semantic.min.css';\nimport 'react-calendar/dist/Calendar.css'\nimport 'react-toastify/dist/ReactToastify.min.css'\nimport 'react-datepicker/dist/react-datepicker.css';\nimport './app/layout/styles.css';\nimport App from './app/layout/App';\nimport reportWebVitals from './reportWebVitals';\nimport { store, StoreContext } from './app/stores/store';\nimport { Router } from 'react-router-dom';\nimport {createBrowserHistory} from 'history';\nimport ScrollToTop from './app/layout/ScrollToTop';\nexport const history = createBrowserHistory();\n\nReactDOM.render(\n  <StoreContext.Provider value={store}>\n    <Router history={history}>\n      <ScrollToTop />\n    <App />\n    </Router>\n  </StoreContext.Provider>,\n    \n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}